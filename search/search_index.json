{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Mycelium: The Ultimate API Gateway","text":"<p>Welcome to Mycelium API Gateway, the ultimate solution for secure, flexible, and multi-tenant API management! Whether you're building a robust platform or enhancing your downstream APIs, our gateway is designed to provide you with everything you need for seamless authentication, authorization, and security. \ud83c\udf89</p>"},{"location":"#key-features","title":"\ud83c\udf1f Key Features","text":""},{"location":"#authentication-authorization","title":"\ud83d\udd12 Authentication &amp; Authorization","text":"<ul> <li>Federated Identity Support: Integrate with external identity providers   while maintaining full control over roles and permissions.</li> <li>Role-Based Access Control (RBAC): Define granular roles for both the   gateway and downstream APIs using simple YAML configurations.</li> <li>Two-Factor Authentication (2FA): Built-in support for TOTP to ensure an   extra layer of security.</li> </ul>"},{"location":"#multi-tenant-architecture","title":"\ud83c\udfe2 Multi-Tenant Architecture","text":"<ul> <li>Tenant Management: Create and manage tenants with subscription-based   accounts.</li> <li>Role Assignment: Invite users to join tenants and assign them specific   roles to streamline collaboration.</li> </ul>"},{"location":"#secure-secrets-management","title":"\ud83d\udd11 Secure Secrets Management","text":"<ul> <li>Vault Integration: Leverage HashiCorp Vault for secure storage of secrets.</li> <li>Flexible Configurations: Use secrets stored in Vault, environment   variables, or define them in YAML.</li> <li>Dynamic Secret Injection: Automate secure secret delivery to downstream   APIs.</li> </ul>"},{"location":"#api-routing-webhooks","title":"\ud83c\udf10 API Routing &amp; Webhooks","text":"<ul> <li>Smart API Routing: Easily configure API routes with support for secure   token-based authentication.</li> <li>Webhook Support: Define webhooks with secrets for secure callbacks and   notifications.</li> </ul>"},{"location":"#yaml-driven-configuration","title":"\ud83d\udcc4 YAML-Driven Configuration","text":"<ul> <li>Simple and Intuitive: Manage all configurations (tenants, roles,   permissions, routes, and security) with easy-to-read YAML files.</li> <li>Environment Flexibility: Combine YAML definitions with environment   variables for maximum flexibility.</li> </ul>"},{"location":"#security-first-design","title":"\ud83d\udee1\ufe0f Security-First Design","text":"<ul> <li>Downstream Security: Automatically pass role-based security credentials to   downstream APIs.</li> <li>Token Management: Store and securely pass tokens in request headers.</li> <li>Compliance Ready: Designed with modern security practices to meet   enterprise compliance requirements.</li> </ul>"},{"location":"#why-choose-mycelium-api-gateway","title":"\ud83c\udfaf Why Choose Mycelium API Gateway?","text":"<ol> <li>Community-Driven and Open Source: Leverage a growing community while    benefiting from an open-source model.</li> <li>Scalable and Modular: Designed to grow with your needs, from startups to    enterprise-scale applications.</li> <li>Developer-Friendly: YAML-based configurations, secure secret management,    and role-based policies make it easy to get started.</li> </ol>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Postgres (Database for tenant and user management)</li> <li>HashiCorp Vault (optional but recommended for secret management in   production environments)</li> <li>Redis (Caching for performance)</li> <li>Docker (optional for quick deployment)</li> </ul>"},{"location":"#join-the-community","title":"\ud83d\udcac Join the Community","text":"<ul> <li>GitHub Issues for   feedback and feature requests</li> </ul>"},{"location":"#star-us","title":"\ud83c\udf1f Star Us","text":"<p>If you find this project useful, please give us a \u2b50 on GitHub to support our growth and attract more contributors!</p>"},{"location":"#license","title":"License","text":"<p>Mycelium API Gateway is licensed under the Apache 2.0 License. Additional restrictions for commercial use apply under the Commons Clause.</p> <p>We can't wait to see how Mycelium API Gateway powers your next big project! \ud83d\ude80</p>"},{"location":"config/","title":"Configure Mycelium API Gateway","text":"<p>TODO</p>"},{"location":"deploy-k8s/","title":"Deploy Mycelium API Gateway in Kubernetes with Helm","text":"<p>TODO</p>"},{"location":"deploy-locally/","title":"Deploy Mycelium API Gateway locally with docker compose","text":"<p>TODO</p>"},{"location":"endpoints/","title":"Management Endpoints","text":"<p>TODO</p>"},{"location":"install/","title":"How to install and execute Mycelium API Gateway","text":"<p>This guide will walk you through the steps to install Mycelium API Gateway on your local machine. Mycelium API Gateway package includes twelve libs and services, available in Crates.io. It should be installed using the cargo package manager.</p>"},{"location":"install/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following installed on your machine:</p> <ul> <li>Postgres (Database for tenant and user management)</li> <li>HashiCorp Vault (optional but recommended for secret management in   production environments)</li> <li>Redis (Caching for performance)</li> <li>Docker (optional for quick deployment)</li> </ul>"},{"location":"install/#installation-using-cargo","title":"Installation using cargo","text":"<p>The simplest way to install Mycelium API Gateway is to use the <code>cargo</code> package manager.</p> <pre><code>cargo install mycelium-api\n</code></pre> <p>Once installed, the simplest way to start the API Gateway is to run the following command:</p> <pre><code>SETTINGS_PATH=settings/config.example.yaml myc-api\n</code></pre> <p>Note that the environment variable <code>SETTINGS_PATH</code> is pointing to the settings file. For details of the settings file, please refer to the settings documentation.</p>"},{"location":"install/#installation-using-docker","title":"Installation using Docker","text":"<p>The easiest way to install Mycelium API Gateway is to use the Docker image.</p> <pre><code>docker pull sgelias/mycelium-api:latest\n</code></pre>"},{"location":"install/#initialize-postgres-database","title":"Initialize Postgres Database","text":"<p>Mycelium API Gateway uses Postgres as the main datastore. Thus, the first step to start the API Gateway is to initialize the Postgres database. To do this, first guarantee that you have a Postgres instance running. Then, you can use the <code>postgres/sql/up.sql</code> script to initialize the database using the following command with the <code>psql</code> utility's with the <code>-v</code> option to pass the database password:</p> <pre><code>psql postgres://postgres:postgres@localhost:5432/postgres \\ \n  -f postgres/sql/up.sql \\ \n  -v db_password='REPLACE_ME'\n</code></pre> <p>Replace the connection string with your own Postgres connection string. Note the <code>postgres</code> database is used to initialize the connection, however the script itself creates an alternative database named <code>mycelium-v7-dev</code> as default.</p> <p>The database name is configurable using the <code>db_name</code> variable in the <code>up.sql</code> script. Example:</p> <pre><code>psql postgres://postgres:postgres@localhost:5432/postgres \\ \n  -f postgres/sql/up.sql \\ \n  -v db_name='my-mycelium-database' \\ \n  -v db_password='REPLACE_ME'\n</code></pre> <p>Additional arguments customizations should be done in the <code>up.sql</code> script to set the <code>db_user</code> and <code>db_role</code> variables. Default values are <code>mycelium-v7-user</code> and <code>service-role-mycelium-v7</code> respectively.</p>"},{"location":"install/#initialize-vault","title":"Initialize Vault","text":"<p>Vault is optional but recommended for secret management in production environments. To initialize Vault, use the standard Vault CLI commands to init and unseal the Vault.</p> <pre><code>vault operator init\n</code></pre> <p>As output, you will get the root token and the keys to unseal the Vault.</p> <pre><code>Unseal Key 1: REPLACE_ME\nUnseal Key 2: REPLACE_ME\nUnseal Key 3: REPLACE_ME\nUnseal Key 4: REPLACE_ME\nUnseal Key 5: REPLACE_ME\n\nInitial Root Token: REPLACE_ME\n</code></pre> <p>Once the Vault is initialized, you can unseal it using the following command:</p> <pre><code>vault operator unseal\n</code></pre> <p>For more information on how to use Vault, please refer to the official Vault documentation.</p> <p>Lets code and be happy!</p>"},{"location":"intro/","title":"Introduction","text":"<p>TODO</p>"},{"location":"routes/","title":"Configure routes","text":"<p>TODO</p>"}]}